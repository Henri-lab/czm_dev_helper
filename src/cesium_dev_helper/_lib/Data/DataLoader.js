import * as Cesium from "cesium";
import { typeOf } from "../util/type";


// Êú¨Á±ªË∞ÉÁî®ËÄÖÂ∫î‰π†ÊÉØÂ∞ÜÂõûË∞ÉcbÊîæÂú®options‰∏≠ ËÄå‰∏çÊòØÈÄöÂ∏∏ÁöÑÂè¶Ëµ∑‰∏Ä‰∏™ÂèÇÊï∞
export default class DataLoader {
    constructor(viewer) {
        this.viewer = viewer;
        this.cache = new Map(); // ÁºìÂ≠òÊú∫Âà∂
    }

    clearCache() {
        this.cache.clear();
    }


    // ‰∏≠Â§ÆÂáΩÊï∞‚ú®
    /**
     * Private method to load data with progress feedback.
     *
     * @private
     * @param {string} url - The URL of the data to load.
     * @param {string} type - The type of the data to load.
     * @param {object} [options] - Additional options for loading the data.
     * @param {function} [options.onSuccess] - A callback function to be executed when the data is successfully loaded.
     * @param {function} [options.onError] - A callback function to be executed if an error occurs during the loading process.
     * @param {function} [options.onProgress] - A callback function to be executed to provide progress information during the loading process.
     * @param {object} [options.headers] - Additional headers to be sent with the request.
     * @param {string} [options.overrideMimeType] - A MIME type to override the default MIME type for the request.
     *
     * @returns {Promise<Cesium.DataSource|Cesium.Cesium3DTileset>} A promise that resolves to the loaded data source or 3DTileset;
     * */
    async _loadDataWithProgress(url, type, options = {}) {
        // Ê£ÄÊü•ÁºìÂ≠ò
        if (this.cache.has(url)) {
            const cachedData = this.cache.get(url);
            if (options.onSuccess) options.onSuccess(cachedData);
            return cachedData;
        }
        let loaded;

        try {
            let data;
            // Èùû3dmodel
            if (!type.toLowerCase() === '3dtiles' || !type.toLowerCase() === 'gltf') {
                const response = await xhr;
                data = await response.json();
            }

            switch (type.toLowerCase()) {
                case 'geojson':
                    loaded = await Cesium.GeoJsonDataSource.load(data, options);
                    break;
                case 'kml':
                    loaded = await Cesium.KmlDataSource.load(data, options);
                    break;
                case 'czml':
                    loaded = await Cesium.CzmlDataSource.load(data, options);
                    break;
                case '3dtiles':
                    // Êñ∞Áâàapi: Cesium.Cesium3DTileset.fromUrl(url, options);
                    loaded = await new Cesium.Cesium3DTileset({ url, options });
                    break;
                case 'gltf':
                    loaded = await Cesium.Model.fromGltf({ url, ...options });
                    break;
                case 'gpx':
                    loaded = await Cesium.GpxDataSource.load(data, options);
                    break;
                // case 'topojson':
                // TopoJSON ‰∏çÊîØÊåÅ??
                // loaded = await Cesium.TopoJsonDataSource.load(data, options);
                // break;
                default:
                    throw new TypeError(`Unsupported data type: ${type}`);
            }

            // üö®
            // ‰∏çËÉΩÂ∞Ü3dtilesÊîæÂà∞dataSourceÈáåÈù¢:dataSource‰ºöË¢´Êó∂ÈíüÁõëÂê¨,ËÄåmodelÂç≥primitive‰∏çÂèóÊó∂ÈíüÊéßÂà∂
            if (!type.toLowerCase() === '3dtiles' || !type.toLowerCase() === 'gltf')
                this.viewer.dataSources.add(loaded/* Ê≠§Êó∂‰ªÖ‰ªÖÊòØdatasource*/);

            // Ê∑ªÂä†Âà∞ÁºìÂ≠ò
            this.cache.set(url, loaded);

            // ÂõûÊéâÂä†ËΩΩÂØπË±°
            if (options.onSuccess) options.onSuccess(loaded);
        } catch (error) {
            // ÂõûÊéâÂä†ËΩΩÈîôËØØ
            if (options.onError) options.onError(error);
            else console.error(`DataLoader loading ${type}:`, error);
        }

        // ÁõëÂê¨3dÂÖÉÁ¥†ÁöÑÂä†ËΩΩËøõÂ∫¶  ÂõûË∞ÉÂá∫Âä†ËΩΩËøõÂ∫¶ 3dÂÖÉÁ¥†ÈÉΩË¶ÅreadyPeomise ÊúâÁÇπÁÉ¶üí¢
        // if (type === '3dtiles' && loaded) {
        //     loaded.readyPromise.then(final => {
        //         this._check3DTilesetLoadProgress(final, options.onProgress);
        //     })
        // }
        // if (type === 'gltf' && loaded) {
        //     loaded.readyPromise.then(final => {
        //         this._checkModelLoadingProgress(final, options.onProgress);
        //     })
        // }

        return loaded;
    }


    // ‰∏≠Â§ÆÂáΩÊï∞‚ú®
    /**
     * Generic function to load a resource into the Cesium viewer.
     *
     * @param {Object|Array} opt - Objects containing the URL and options for each resource.
     * @param {string} opt.url - The URL of the resource to load.
     * @param {string} type - The type of resource to load ('3dtiles' or 'gltf').
     * @param {Object} [opt.headers] - Additional headers to be sent with the request.
     * @param {string} [opt.overrideMimeType] - A MIME type to override the default MIME type for the request.
     * @param {function} [opt.onSuccess] - A callback function to be executed when the resource is successfully loaded.
     * @param {function} [opt.onError] - A callback function to be executed if an error occurs during the loading process.
     * @param {function} [opt.onProgress] - A callback function to be executed to provide progress information during the loading process.
     *
     * @returns {Promise<any|Array<Promise<any>>>} 
     * A promise that resolves to the loaded resource(s). If multiple URLs are provided, it returns an array of promises.
     *
     * @throws {Error} If the provided URL is not a string or if the provided options are not an object.
     */
    // 3D Tiles and GLTF are both used in 3D graphics and GIS applications, 
    // but they serve different purposes and have different structures. 
    // they can't be simply categorized under the same "model" concept.
    async load3D(opt, type) {//Â∞ÜÊâÅÂπ≥ÁöÑoptÂàÜ‰∏∫urlÂíåoptions‰∏§‰∏™ÈÉ®ÂàÜüéÉ
        // Ensure opt has three properties that can return data
        let _finalOpt = {
            onSuccess: () => { },
            onError: () => { },
            onProgress: () => { }
        };
        Object.assign(_finalOpt, opt);

        // Parse parameters
        let __finalOptCopy = _finalOpt; // Cache to prevent data loss
        let _url = _finalOpt.url;
        delete _finalOpt.url;

        // Load a single URL
        if (!Array.isArray(opt) && typeOf(_url) === "String" && typeOf(_finalOpt) === "Object") {
            // Data loaded will be passed back on _finalOpt's three 'on' properties
            const res = await this._loadDataWithProgress(_url, type, _finalOpt);
            // Âä†ËΩΩ3dtilesÁöÑÊó∂ÂÄôË¶Å‰ΩøÁî®readyPromise 

            if (type === '3dtiles' && res) {
                const _3dtile = res;
                // const _3dtile = await res.readyPromise
                // üí•üí•üí•ÊúâÁÇπÁñëÊÉëËøôÈáåËøîÂõûres ÊàñËÄÖ  res.readyPromise ,
                // Ë∞ÉÁî®ËÄÖÊãøÂà∞ËøîÂõûÂÄºÈÉΩË¶ÅÂú®readyPromiseÂêéÊâçËÉΩÊãøÂà∞tileüí•üí•üí•

                // console.log('3d tileset loaded successfully');

                // Data loaded is bound to the passed-in opt.onSuccess callback
                Object.assign(opt, _finalOpt);

                return _3dtile;
            } else if (type === 'gltf') {
                const _gltf = res/*await res.readyPromise*/;

                // console.log('GLTF loaded successfully');

                // Data loaded is bound to the passed-in opt.onSuccess callback
                Object.assign(opt, _finalOpt);
                console.log('hhhhhhhhh', _gltf)
                return _gltf;
            }

        }
        // Load multiple URLs
        else if (Array.isArray(opt)) {
            let _opts = opt;
            return Promise.all(_opts.map(opt => this.load3D(opt, type)));
        }
    }

    // ‰∏≠Â§ÆÂáΩÊï∞‚ú®
    /**
     * Load data of a specific type into the Cesium viewer.
     *
     * @param {string} url - The URL of the data to load.
     * @param {string} type - The type of the data to load. Supported types are: 'geojson', 'kml', 'czml', '3dtiles', 'gpx', 'topojson'.
     * @param {object} [options] - Additional options for loading the data.
     * @param {function} [options.onSuccess] - A callback function to be executed when the data is successfully loaded.
     * @param {function} [options.onError] - A callback function to be executed if an error occurs during the loading process.
     * @param {function} [options.onProgress] - A callback function to be executed to provide progress information during the loading process.
     * @param {object} [options.headers] - Additional headers to be sent with the request.
     * @param {string} [options.overrideMimeType] - A MIME type to override the default MIME type for the request.
     *
     * @returns {Promise<Cesium.DataSource} A promise that resolves to the loaded data source
     *
     * @throws {Error} If an unsupported data type is specified.
     */
    async loadData(url, type, options = {}) {
        switch (type.toLowerCase()) {
            case 'geojson':
                return this.loadGeoJSON(url, options);
            case 'kml':
                return this.loadKML(url, options);
            case 'czml':
                return this.loadCZML(url, options);
            case 'gpx':
                return this.loadGPX(url, options);
            case '3dtiles':
                return this.load3DTiles(url, options);
            case 'gltf':
                return this.loadGLTF(url, options);
            // case 'topojson':
            //     return this.loadTopoJSON(url, options);
            default:
                throw new TypeError(`Unsupported data source type: ${type}`);
        }
    }





    // Êâ©Â±ïÂáΩÊï∞üôå
    /**
     * Private method to listen for tile load progress and call a progress callback.
     *
     * @private
     * @param {Cesium.Cesium3DTileset} tileset - The 3D tileset to listen for progress events.
     * @param {function} progressCallback - A callback function to be called with progress information.
     *
     * @returns {undefined}
     */
    async _check3DTilesetLoadProgress(tileset, progressCallback) {
        let totalTiles = 0;
        let loadedTiles = 0;

        // Event listener for when a tile is requested
        tileset.tileLoadProgress.addEventListener(function (event) {
            totalTiles = event.total; // Total tiles to be loaded
            loadedTiles = event.current; // Tiles currently loaded

            if (progressCallback) {
                const progress = loadedTiles / totalTiles;
                progressCallback(progress);
            }
        });

        // Event listener for when all tiles have finished loading
        tileset.allTilesLoaded.addEventListener(function () {
            if (progressCallback) {
                progressCallback(1); // Loading complete
            }
        });
    }

    /**
      * Private method to listen for model load progress and call a progress callback.
      *
      * @private
      * @param {Cesium.Model} model - The model to listen for progress events.
      * @param {function} progressCallback - A callback function to be called with progress information.
      *
      * @returns {undefined}
      */
    async _checkModelLoadingProgress(model, progressCallback) {
        if (model.ready) {
            // Model is fully loaded
            if (progressCallback) {
                progressCallback(1); // 100% loaded
            }
            return; //ÈÄíÂΩíÁªìÊùü
        }

        const stats = model._resource.fetchImage().then(() => {
            const loadedBytes = model._resource.getBytesLoaded();
            const totalBytes = model._resource.getTotalBytes();
            const progress = loadedBytes / totalBytes;

            if (progressCallback && loadedBytes !== previousLoadedBytes) {
                previousLoadedBytes = loadedBytes;
                progressCallback(progress);
            }

            // ÈÄíÂΩíÂæ™ÁéØÁõëÂê¨
            // Continue checking the loading progress
            setTimeout(_checkModelLoadingProgress(model, progressCallback), 100);
        });
    }




    // Âø´ÈÄüË∞ÉÁî®üí®
    async load3DTiles(opt) {
        return await this.load3D(opt, '3dtiles');
    }

    async loadGLTF(opt) {
        return await this.load3D(opt, 'gltf');
    }

    async loadGeoJSON(url, options = {}) {
        return this._loadDataWithProgress(url, 'geojson', options);
    }

    async loadKML(url, options = {}) {
        return this._loadDataWithProgress(url, 'kml', options);
    }

    async loadCZML(url, options = {}) {
        return this._loadDataWithProgress(url, 'czml', options);
    }

    async loadGPX(url, options = {}) {
        return this._loadDataWithProgress(url, 'gpx', options);
    }

    async loadTopoJSON(url, options = {}) {
        return this._loadDataWithProgress(url, 'topojson', options);
    }

}



// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// GLTF (GL Transmission Format)--Â∞èÊ®°Âûã
// Purpose: GLTF is a file format for transmitting 3D models, including geometry, textures, and animations. It's designed to be efficient and easy to use, making it suitable for transmitting 3D models over the web.
// Structure: A GLTF file contains a description of a 3D model, including its meshes, materials, textures, and animations. It can be thought of as a complete representation of a single 3D object or a small collection of objects.
// Usage: GLTF is commonly used for individual models, such as characters, objects, or small scenes. It's widely supported in various 3D applications and libraries, including Cesium, Babylon.js, and three.js.
// Loading in Cesium: In Cesium, GLTF models are loaded using Cesium.Model.fromGltf.

// 3D Tiles--Â§ßÂú∫Èù¢
// Purpose: 3D Tiles is an open specification for streaming massive heterogeneous 3D geospatial datasets. It enables efficient streaming and visualization of large-scale 3D data, such as city models, terrain, point clouds, and building interiors.
// Structure: A 3D Tiles dataset is a spatial hierarchy of tiles, where each tile can contain different types of 3D content (e.g., batched 3D models, point clouds, vector data). The tiles are organized in a quadtree or octree structure to support efficient level-of-detail (LOD) streaming and rendering.
// Usage: 3D Tiles is used for large-scale geospatial datasets, enabling applications like virtual city models, global terrain visualization, and dynamic point cloud rendering. It is designed to handle datasets that are too large to be loaded into memory all at once.
// Loading in Cesium: In Cesium, 3D Tiles datasets are loaded using Cesium.Cesium3DTileset.

// Why They Can't Be Categorized Under the Same "Model" Concept--
// Different Use Cases: GLTF is used for individual models or small scenes, while 3D Tiles is designed for large-scale, tiled geospatial datasets.
// Different Structures: GLTF is a single file (or a small set of files) representing a model, while 3D Tiles is a hierarchical structure of tiles that can contain various types of 3D content.
// Different Loading Mechanisms: Cesium provides different classes and methods for loading GLTF models (Cesium.Model) and 3D Tilesets (Cesium.Cesium3DTileset) because they are fundamentally different in how they are structured and used.

// Summary--
// While both GLTF and 3D Tiles can represent 3D content,
// their purposes, structures, and use cases are different enough that they cannot be simply categorized under the same "model" concept. Instead, they are complementary technologies that serve different needs in the realm of 3D graphics and geospatial visualization.
// In Cesium, they are handled by different classes and have different loading and rendering mechanisms to accommodate their unique characteristics.



// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Âú® CesiumJS ‰∏≠ÔºåCesium3DTileset Âíå Cesium3DTile ÊòØÁî®‰∫éÂ§ÑÁêÜ 3D Tiles Êï∞ÊçÆÁöÑ‰∏§‰∏™ÈáçË¶ÅÊ¶ÇÂøµ„ÄÇÂÆÉ‰ª¨ÂàÜÂà´‰ª£Ë°®Êï¥‰∏™ 3D Tiles ÈõÜÂêàÂíåÈõÜÂêà‰∏≠ÁöÑÂçï‰∏™ 3D Tile„ÄÇ

// Cesium3DTilesetüí•
// Cesium3DTileset ‰ª£Ë°®‰∏Ä‰∏™ÂÆåÊï¥ÁöÑ 3D Tiles ÈõÜÂêà„ÄÇÂÆÉÈÄöÂ∏∏ÂåÖÂê´‰∏Ä‰∏™ÊàñÂ§ö‰∏™ 3D Tiles Êñá‰ª∂ÔºåËøô‰∫õÊñá‰ª∂ÂÆö‰πâ‰∫ÜÊ®°Âûã„ÄÅÁÇπ‰∫ë„ÄÅÁü¢ÈáèÊï∞ÊçÆÁ≠â„ÄÇCesium3DTileset Ë¥üË¥£ÁÆ°ÁêÜËøô‰∫õÊñá‰ª∂ÁöÑÂä†ËΩΩÂíåÊ∏≤Êüì„ÄÇ

// ‰∏ªË¶ÅÂ±ûÊÄßÂíåÊñπÊ≥ïÂ≠òüí¶
// url: Áî®‰∫éÂä†ËΩΩ 3D Tileset ÁöÑ URL„ÄÇ
// show: ÊéßÂà∂ Tileset ÊòØÂê¶ÂèØËßÅ„ÄÇ
// style: Áî®‰∫éÂ∫îÁî®Ê†∑ÂºèÂà∞ Tileset ÁöÑ Cesium3DTileStyle ÂØπË±°„ÄÇ
// readyPromise: ‰∏Ä‰∏™ PromiseÔºåÂú® Tileset ÂáÜÂ§áÂ•ΩÂêéËß£Êûê„ÄÇ
// boundingVolume: Tileset ÁöÑÂåÖÂõ¥‰Ωì„ÄÇ
// maximumScreenSpaceError: ÊéßÂà∂ Tileset ÁöÑÁªÜËäÇÂ±ÇÊ¨°(LODs)„ÄÇ
// tileVisible: Âú® Tile ÂèØËßÅÊó∂Ëß¶ÂèëÁöÑ‰∫ã‰ª∂„ÄÇ


// Cesium3DTileüí•
// Cesium3DTile ‰ª£Ë°® Cesium3DTileset ‰∏≠ÁöÑÂçï‰∏™ Tile„ÄÇÊØè‰∏™ Tile ÂåÖÂê´Âá†‰ΩïÊï∞ÊçÆÂíåÂÖÉÊï∞ÊçÆÔºåÂπ∂‰∏îÂèØ‰ª•ÂåÖÂê´Â≠ê Tile„ÄÇCesium ÈÄöËøáÂàÜÂ±ÇÊ¨° (LOD) Âä†ËΩΩÂíåÊ∏≤ÊüìËøô‰∫õ TileÔºå‰ª•Êèê‰æõÊõ¥Â•ΩÁöÑÊÄßËÉΩÂíåÂèØËßÜÂåñÊïàÊûú„ÄÇ

// ‰∏ªË¶ÅÂ±ûÊÄßÂíåÊñπÊ≥ïüí¶
// boundingVolume: Tile ÁöÑÂåÖÂõ¥‰Ωì„ÄÇ
// content: Tile ÁöÑÂÜÖÂÆπÔºåÂèØ‰ª•ÊòØÂá†‰Ωï‰Ωì„ÄÅÁÇπ‰∫ëÁ≠â„ÄÇ
// geometricError: ÊéßÂà∂ Tile ÁöÑÂá†‰ΩïËØØÂ∑Æ„ÄÇ
// children: Â≠ê Tile ÁöÑÊï∞ÁªÑ„ÄÇ
// visible: ÊéßÂà∂ Tile ÊòØÂê¶ÂèØËßÅ„ÄÇ
// Cesium3DTile ÈÄöÂ∏∏‰∏çÁõ¥Êé•ÂÆû‰æãÂåñÔºåËÄåÊòØÈÄöËøá Cesium3DTileset ÁÆ°ÁêÜÂíåËÆøÈóÆ„ÄÇ



// 3D Tiles Âä†ËΩΩÂíåÊ∏≤ÊüìÊµÅÁ®ã:üí•
// --ÂàùÂßãÂåñ Cesium Viewer: ‰ΩøÁî® Cesium.Viewer ÂàùÂßãÂåñ Cesium Viewer„ÄÇ
// --Âä†ËΩΩ 3D Tileset: ‰ΩøÁî® Cesium.Cesium3DTileset Âä†ËΩΩ 3D Tileset ÁöÑÂÖ•Âè£Êñá‰ª∂ tileset.json„ÄÇ
// --Â§ÑÁêÜ Tileset ÁöÑÂä†ËΩΩÂÆåÊàê: ‰ΩøÁî® tileset.readyPromise Â§ÑÁêÜ Tileset Âä†ËΩΩÂÆåÊàêÂêéÁöÑÊìç‰Ωú„ÄÇ
// --Áº©ÊîæÂà∞ Tileset: ‰ΩøÁî® viewer.zoomTo(tileset) Áº©ÊîæÂà∞Âä†ËΩΩÁöÑ Tileset„ÄÇ
// --ÊâìÂç∞Ê†π Tile ÁöÑÂá†‰ΩïËØØÂ∑Æ: ËÆøÈóÆÂπ∂ÊâìÂç∞Ê†π Tile ÁöÑÂá†‰ΩïËØØÂ∑Æ„ÄÇ
// --Â§ÑÁêÜ Tile ÂèØËßÅ‰∫ã‰ª∂: ‰ΩøÁî® tileset.tileVisible ‰∫ã‰ª∂Â§ÑÁêÜ Tile ÂèØËßÅÊó∂ÁöÑÊìç‰Ωú„ÄÇ
// --‰øÆÊîπÊ†∑Âºè: ‰ΩøÁî® Cesium.Cesium3DTileStyle ‰øÆÊîπ Tileset ÁöÑÊ†∑Âºè„ÄÇ

// ÊÄªÁªìüí•
// Âä†ËΩΩ Tileset: ‰ΩøÁî® Cesium3DTileset Âä†ËΩΩ tileset.json Êñá‰ª∂„ÄÇËøô‰∏™Êñá‰ª∂ÂÆö‰πâ‰∫Ü Tileset ÁöÑÁªìÊûÑÂíåÊ†π Tile„ÄÇ( Tileset.root)
// ÁÆ°ÁêÜ Tiles: Cesium3DTileset ÁÆ°ÁêÜ Cesium3DTile ÁöÑÂä†ËΩΩÂíåÊ∏≤Êüì„ÄÇÂÆÉÊ†πÊçÆËßÜÂõæÂíåÂ±ÇÊ¨°ÁªÜËäÇ (LOD) Âä®ÊÄÅÂä†ËΩΩÂíåÂç∏ËΩΩ Tile„ÄÇ
// Ê∏≤Êüì: Cesium Ê†πÊçÆ Tile ÁöÑÂèØËßÅÊÄßÂíåÂá†‰ΩïËØØÂ∑ÆÊ∏≤ÊüìÈÄÇÂΩìÁöÑ Tile„ÄÇ
